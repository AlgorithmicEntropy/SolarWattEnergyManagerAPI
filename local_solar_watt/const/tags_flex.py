from typing import Dict

from .device import DeviceClass

TAGS_FLEX: Dict[DeviceClass, Dict[str, str]] = {
    DeviceClass.BATTERY: {
        "device_state": "#mode",
        "work_in": "#work_in",
        "work_out": "#work_out",
        "power_out": "#power_out",
        "power_in": "#power_in",
    },
    DeviceClass.BATTERY_METER: {
        "id_manufacturer": "IdManufacturer",
        "id_firmware": "IdFirmware",
        "device_state": "Status",
        "ac_power": "#battery_calculated_power",
        "backup_state_of_charge": "#min_soc_on_grid",
        "battery_error": "BatteryError",
        "state_error_list": "StateErrorList",
        "count_battery_modules": "CountBatteryModules",
        "current_battery_in": "CurrentBatteryIn",
        "current_battery_out": "CurrentBatteryOut",
        "factor_forecast": "FactorForecast",
        "url": "IdUrlPdg",
        "mode_converter": "ModeConverter",
        "power_ac_in": "#power_in",
        "power_ac_out": "#power_out",
        "power_yield_sum": "PowerYieldSum",
        "state_of_charge": "#bms_soc",
        "state_of_health": "#bms_soh",
        "system_error": "SysErr",
        "system_status": "SysStat",
        "temp_packs": "#bms_1_temperature",
        "temp_base": "TemperatureBase",
        "temp_battery": "TemperatureBattery",
        "temp_grm": "TemperatureGRM",
        "work_ac_in": "#work_in_total",
        "work_ac_out": "#work_out_total",
        "work_capacity": "WorkCapacity",
        "work_charge": "WorkCharge",
        "work_charged": "WorkCharged",
        "work_discharged": "WorkDischarged",
    },
    DeviceClass.INVERTER: {
        "id_manufacturer": "IdManufacturer",
        "id_firmware": "IdFirmware",
        "device_state": "Status",
        "state_error_list": "StateErrorList",
        "ac_power": "#active_power",
        "power_ac_out": "PowerACOut",
        "power_string_dc_in": "#total_pv_input_power",
        "power_yield_sum": "PowerYieldSum",
        "work_ac_out": "#work_out_total",
    },
    DeviceClass.LOCATION: {
        "device_state": "StateDevice",
        "power_buffered": "PowerBuffered",
        "power_buffered_from_grid": "PowerBufferedFromGrid",
        "power_buffered_from_producers": "PowerBufferedFromProducers",
        "power_consumed": "PowerConsumed",
        "power_consumed_from_grid": "PowerConsumedFromGrid",
        "power_consumed_from_producers": "PowerConsumedFromProducers",
        "power_consumed_from_storage": "PowerConsumedFromStorage",
        "power_in": "PowerIn",
        "power_out": "PowerOut",
        "power_out_from_producers": "PowerOutFromProducers",
        "power_out_from_storage": "PowerOutFromStorage",
        "power_produced": "PowerProduced",
        "power_released": "PowerReleased",
        "power_self_supplied": "PowerSelfSupplied",
        "power_self_consumed": "PowerSelfConsumed",
        "work_buffered": "WorkBuffered",
        "work_buffered_from_grid": "WorkBufferedFromGrid",
        "work_buffered_from_producers": "WorkBufferedFromProducers",
        "work_consumed": "WorkConsumed",
        "work_consumed_from_grid": "WorkConsumedFromGrid",
        "work_consumed_from_producers": "WorkConsumedFromProducers",
        "work_consumed_from_storage": "WorkConsumedFromStorage",
        "work_in": "WorkIn",
        "work_out": "WorkOut",
        "work_out_from_producers": "WorkOutFromProducers",
        "work_out_from_storage": "WorkOutFromStorage",
        "work_produced": "WorkProduced",
        "work_released": "WorkReleased",
        "work_self_supplied": "WorkSelfSupplied",
        "work_self_consumed": "WorkSelfConsumed",
        "price_work_in": "PriceWorkIn",
    },
    DeviceClass.WALLBOX: {
        "device_state": "#mode",
    }
}
